// Generated by CoffeeScript 1.12.4
(function() {
  var Gobgp, grpc, libgobgp, protoDescriptor;

  grpc = require('grpc');

  protoDescriptor = grpc.load(__dirname + "/deps/gobgp/gobgp.proto").gobgpapi;

  libgobgp = require('./build/Release/gobgp');

  Gobgp = (function() {
    function Gobgp(server) {
      this.stub = new protoDescriptor.GobgpApi(server, grpc.credentials.createInsecure());
    }

    Gobgp.prototype.defaultCallback = function(err) {
      return console.error(err);
    };

    Gobgp.prototype.getRib = function(options, callback) {
      if (typeof options.family === 'string') {
        options.family = this.routeFamily(options.family);
      }
      return this.stub.getRib({
        table: options
      }, (function(_this) {
        return function(err, response) {
          if (err) {
            if (callback) {
              return callback(err);
            } else {
              return _this.defaultCallback(err);
            }
          }
          response.table.destinations.forEach(function(destination) {
            return destination.paths = destination.paths.map(function(path) {
              var decoded;
              decoded = JSON.parse(_this.decodePath(path));
              path.nlri = decoded.nlri.value;
              path.attrs = decoded.attrs;
              delete path.pattrs;
              return path;
            });
          });
          if (callback) {
            return callback(null, response.table);
          }
        };
      })(this));
    };

    Gobgp.prototype.modPath = function(options, path, callback) {
      if (!path) {
        return callback("Invalid argument: path");
      }
      if (typeof path === 'string') {
        path = this.serializePath(options.family, path);
        if (!path) {
          return callback("Invalid argument: path");
        }
        path.is_withdraw = options.withdraw;
      }
      return this.stub.addPath({
        path: path
      }, (function(_this) {
        return function(err, response) {
          if (err) {
            if (callback) {
              return callback(err);
            } else {
              return _this.defaultCallback(err);
            }
          }
          if (callback) {
            return callback(null, response);
          }
        };
      })(this));
    };

    Gobgp.prototype.addPath = function(options, path, callback) {
      return this.modPath(options, path, callback);
    };

    Gobgp.prototype.deletePath = function(options, path, callback) {
      options.withdraw = true;
      return this.modPath(options, path, callback);
    };

    Gobgp.prototype.routeFamily = function(string) {
      return libgobgp.get_route_family(string);
    };

    Gobgp.prototype.serializePath = function(family, string) {
      if (typeof family === 'string') {
        family = this.routeFamily(family);
      }
      return libgobgp.serialize_path(family, string);
    };

    Gobgp.prototype.decodePath = function(path) {
      return libgobgp.decode_path(path);
    };

    return Gobgp;

  })();

  module.exports = Gobgp;

}).call(this);
