// Generated by CoffeeScript 1.10.0
(function() {
  var Gobgp, grpc, libgobgp, protoDescriptor;

  grpc = require('grpc');

  protoDescriptor = grpc.load(__dirname + "/deps/gobgp/api/gobgp.proto").gobgpapi;

  libgobgp = require('./build/Release/gobgp');

  Gobgp = (function() {
    Gobgp.AFI_IP = 1;

    Gobgp.AFI_IP6 = 2;

    Gobgp.SAFI_FLOW_SPEC_UNICAST = 133;

    Gobgp.RF_FS_IPv4_UC = Gobgp.AFI_IP << 16 | Gobgp.SAFI_FLOW_SPEC_UNICAST;

    Gobgp.RF_FS_IPv6_UC = Gobgp.AFI_IP6 << 16 | Gobgp.SAFI_FLOW_SPEC_UNICAST;

    function Gobgp(server) {
      this.stub = new protoDescriptor.GobgpApi(server, grpc.Credentials.createInsecure());
    }

    Gobgp.prototype.getRib = function(options, callback) {
      return this.stub.getRib(options, function(err, table) {
        if (err) {
          return console.error(err);
        }
        table.destinations.forEach(function(destination) {
          return destination.paths = destination.paths.map(function(path) {
            var decoded;
            decoded = JSON.parse(libgobgp.decode_path(path));
            path.nlri = decoded.nlri.value;
            path.attrs = decoded.attrs;
            delete path.pattrs;
            return path;
          });
        });
        if (callback) {
          return callback(table);
        }
      });
    };

    Gobgp.prototype.modPath = function(family, string, callback) {
      var path;
      path = libgobgp.serialize_path(family, string);
      return this.stub.modPath({
        path: path
      }, function(err, response) {
        if (err) {
          return console.error(err);
        }
        if (callback) {
          return callback(response);
        }
      });
    };

    return Gobgp;

  })();

  module.exports = Gobgp;

}).call(this);
